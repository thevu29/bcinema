// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using bcinema.Context;

#nullable disable

namespace bcinema.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241004131043_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("bcinema.Models.Booking", b =>
                {
                    b.Property<Guid>("bookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("scheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.Property<double>("totalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("voucherId")
                        .HasColumnType("uuid")
                        .HasColumnName("voucher_id");

                    b.HasKey("bookingID");

                    b.HasIndex("scheduleId")
                        .IsUnique();

                    b.HasIndex("userId");

                    b.HasIndex("voucherId")
                        .IsUnique();

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("bcinema.Models.BookingDetail", b =>
                {
                    b.Property<Guid>("bookingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("booking_detail_id");

                    b.Property<Guid>("bookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<Guid>("foodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<Guid>("seatId")
                        .HasColumnType("uuid")
                        .HasColumnName("seat_id");

                    b.HasKey("bookingDetailId");

                    b.HasIndex("bookingId");

                    b.HasIndex("foodId");

                    b.HasIndex("seatId")
                        .IsUnique();

                    b.ToTable("booking_details");
                });

            modelBuilder.Entity("bcinema.Models.Food", b =>
                {
                    b.Property<Guid>("foodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("foodId");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("bcinema.Models.Role", b =>
                {
                    b.Property<Guid>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("roleId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("bcinema.Models.Room", b =>
                {
                    b.Property<Guid>("roomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("roomId");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("bcinema.Models.Schedule", b =>
                {
                    b.Property<Guid>("schedule_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("movieId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movie_id");

                    b.Property<Guid>("roomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<int>("runtime")
                        .HasColumnType("integer");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.HasKey("schedule_id");

                    b.HasIndex("roomId")
                        .IsUnique();

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("bcinema.Models.Seat", b =>
                {
                    b.Property<Guid>("seatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("seat_id");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.Property<Guid>("roomId")
                        .HasColumnType("uuid");

                    b.Property<string>("row")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("seatTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("seat_type_id");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.HasKey("seatId");

                    b.HasIndex("roomId");

                    b.HasIndex("seatTypeId");

                    b.ToTable("seats");
                });

            modelBuilder.Entity("bcinema.Models.SeatType", b =>
                {
                    b.Property<Guid>("seatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("seat_type_id");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("seatTypeId");

                    b.ToTable("seat_types");
                });

            modelBuilder.Entity("bcinema.Models.Token", b =>
                {
                    b.Property<Guid>("tokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("token_id");

                    b.Property<string>("refreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("refreshTokenExpireAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expire_at");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("tokenId");

                    b.HasIndex("userId");

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("bcinema.Models.User", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("creatAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("point")
                        .HasColumnType("integer");

                    b.Property<string>("provider")
                        .HasColumnType("text");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("userId");

                    b.HasIndex("roleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("bcinema.Models.UserVoucher", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("isUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("voucherId")
                        .HasColumnType("uuid")
                        .HasColumnName("voucher_id");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.HasIndex("voucherId");

                    b.ToTable("user_voucher");
                });

            modelBuilder.Entity("bcinema.Models.Voucher", b =>
                {
                    b.Property<Guid>("voucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("voucher_id");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("discount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("expireAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_at");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("voucherId");

                    b.ToTable("vouchers");
                });

            modelBuilder.Entity("bcinema.Models.Booking", b =>
                {
                    b.HasOne("bcinema.Models.Schedule", null)
                        .WithOne("Booking")
                        .HasForeignKey("bcinema.Models.Booking", "scheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bcinema.Models.User", null)
                        .WithMany("Bookings")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bcinema.Models.Voucher", null)
                        .WithOne("booking")
                        .HasForeignKey("bcinema.Models.Booking", "voucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bcinema.Models.BookingDetail", b =>
                {
                    b.HasOne("bcinema.Models.Booking", null)
                        .WithMany("bookingDetails")
                        .HasForeignKey("bookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bcinema.Models.Food", null)
                        .WithMany("bookingDetails")
                        .HasForeignKey("foodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bcinema.Models.Seat", null)
                        .WithOne("bookingDetail")
                        .HasForeignKey("bcinema.Models.BookingDetail", "seatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bcinema.Models.Schedule", b =>
                {
                    b.HasOne("bcinema.Models.Room", null)
                        .WithOne("schedule")
                        .HasForeignKey("bcinema.Models.Schedule", "roomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bcinema.Models.Seat", b =>
                {
                    b.HasOne("bcinema.Models.Room", null)
                        .WithMany("seats")
                        .HasForeignKey("roomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bcinema.Models.SeatType", null)
                        .WithMany("seats")
                        .HasForeignKey("seatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bcinema.Models.Token", b =>
                {
                    b.HasOne("bcinema.Models.User", null)
                        .WithMany("tokens")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bcinema.Models.User", b =>
                {
                    b.HasOne("bcinema.Models.Role", null)
                        .WithMany("users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bcinema.Models.UserVoucher", b =>
                {
                    b.HasOne("bcinema.Models.User", null)
                        .WithMany("userVouchers")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bcinema.Models.Voucher", null)
                        .WithMany("userVouchers")
                        .HasForeignKey("voucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bcinema.Models.Booking", b =>
                {
                    b.Navigation("bookingDetails");
                });

            modelBuilder.Entity("bcinema.Models.Food", b =>
                {
                    b.Navigation("bookingDetails");
                });

            modelBuilder.Entity("bcinema.Models.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("bcinema.Models.Room", b =>
                {
                    b.Navigation("schedule")
                        .IsRequired();

                    b.Navigation("seats");
                });

            modelBuilder.Entity("bcinema.Models.Schedule", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("bcinema.Models.Seat", b =>
                {
                    b.Navigation("bookingDetail");
                });

            modelBuilder.Entity("bcinema.Models.SeatType", b =>
                {
                    b.Navigation("seats");
                });

            modelBuilder.Entity("bcinema.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("tokens");

                    b.Navigation("userVouchers");
                });

            modelBuilder.Entity("bcinema.Models.Voucher", b =>
                {
                    b.Navigation("booking");

                    b.Navigation("userVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
